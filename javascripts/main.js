// Generated by CoffeeScript 1.6.3
(function() {
  var HEIGHT, WIDTH, animation, camera, directionalLight, handMesh, pointLight, rectangle, renderer, scene, sphere;

  HEIGHT = window.innerHeight;

  WIDTH = window.innerWidth;

  renderer = new THREE.WebGLRenderer({
    alpha: true
  });

  renderer.setClearColor(0x000000, 1);

  renderer.setSize(WIDTH, HEIGHT);

  document.getElementById('threejs').appendChild(renderer.domElement);

  camera = new THREE.PerspectiveCamera(90, WIDTH / HEIGHT, 10, 1000);

  camera.position.z = 30;

  camera.position.x = 10;

  camera.position.y = 10;

  camera.lookAt(new THREE.Vector3(0, 0, 0));

  scene = new THREE.Scene();

  scene.add(camera);

  scene.add(new THREE.AxisHelper(50));

  scene.add(new THREE.AmbientLight(0x222222));

  directionalLight = new THREE.DirectionalLight(0xffffff, 0.5);

  directionalLight.position.set(0, 1, 1000);

  scene.add(directionalLight);

  pointLight = new THREE.PointLight(0xFFffff);

  pointLight.position = new THREE.Vector3(20, 20, 10);

  pointLight.lookAt(new THREE.Vector3(0, 0, 10));

  scene.add(pointLight);

  rectangle = new THREE.Mesh(new THREE.CubeGeometry(4, 1, 8), new THREE.MeshPhongMaterial({
    color: 0x00ff00
  }));

  rectangle.position = new THREE.Vector3(0, 0, 0);

  scene.add(rectangle);

  sphere = new THREE.Mesh(new THREE.SphereGeometry(1), new THREE.MeshPhongMaterial({
    color: 0xff0000
  }));

  sphere.position = new THREE.Vector3(10, 10, 0);

  scene.add(sphere);

  animation = void 0;

  handMesh = void 0;

  (new THREE.SceneLoader).load('javascripts/right-hand-via-fbx-py-converter.json', function(object) {
    var baseQuaternion, geometry, someBone, updateBoneAttrs;
    geometry = object.geometries.Geometry_64_g0_01;
    geometry.bones = [];
    updateBoneAttrs = function(boneAttrs, parent) {
      var childBoneAttrs, myIndex, q, _i, _len, _ref, _results;
      console.log("udpate attrs (inner)", boneAttrs.name);
      boneAttrs.pos = [boneAttrs.position.x, boneAttrs.position.y, boneAttrs.position.z];
      q = (new THREE.Quaternion).setFromEuler(new THREE.Euler(boneAttrs.rotation[0], boneAttrs.rotation[1], boneAttrs.rotation[2], 'XYZ'));
      boneAttrs.rotq = [q._x, q._y, q._z, q._w];
      boneAttrs.scl = [boneAttrs.scale.x, boneAttrs.scale.y, boneAttrs.scale.z];
      boneAttrs.parent = parent;
      geometry.bones.push(boneAttrs);
      myIndex = geometry.bones.length - 1;
      _ref = boneAttrs.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        childBoneAttrs = _ref[_i];
        _results.push(updateBoneAttrs(childBoneAttrs, myIndex));
      }
      return _results;
    };
    updateBoneAttrs(object.objects['Bip01 R Hand'], -1);
    THREE.GeometryUtils.center(geometry);
    handMesh = new THREE.SkinnedMesh(geometry, object.materials.phong1);
    handMesh.useVertexTexture = false;
    handMesh.scale = new THREE.Vector3(0.01, 0.01, 0.01);
    someBone = handMesh.children[0].children[0].children[0];
    someBone.position.multiply(new THREE.Vector3(20, 20, 20));
    handMesh.children[0].update(handMesh.matrix, true);
    handMesh.children[0].children[0].children[0].rotation;
    baseQuaternion = (new THREE.Quaternion).setFromEuler(new THREE.Euler(-Math.PI / 2, 0, -Math.PI / 2, 'XYZ'));
    handMesh.quaternion = baseQuaternion;
    scene.add(handMesh);
    return Leap.loop(function(frame) {
      var leapHand;
      if (leapHand = frame.hands[0]) {
        handMesh.position.x = leapHand.stabilizedPalmPosition[0] / 10;
        handMesh.position.y = leapHand.stabilizedPalmPosition[1] / 10;
        handMesh.position.z = leapHand.stabilizedPalmPosition[2] / 10;
        handMesh.quaternion = baseQuaternion.clone().multiply((new THREE.Quaternion).setFromEuler(new THREE.Euler(leapHand.roll(), leapHand.direction[1], -leapHand.direction[0], 'XYZ')));
      }
      return renderer.render(scene, camera);
    });
  });

}).call(this);

/*
//@ sourceMappingURL=main.map
*/
