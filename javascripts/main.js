// Generated by CoffeeScript 1.6.3
(function() {
  var HEIGHT, TO_DEG, TO_RAD, WIDTH, animation, camera, handMesh, pointLight, redDot, renderer, scene, yellowDot, zeroVector;

  TO_RAD = Math.PI / 180;

  TO_DEG = 1 / TO_RAD;

  zeroVector = new THREE.Vector3(0, 0, 0);

  THREE.Quaternion.prototype.setFromPoints = function(a, b, c) {
    return this.setFromVectors((new THREE.Vector3).subVectors(a, b).normalize(), (new THREE.Vector3).subVectors(c, b).normalize());
  };

  THREE.Quaternion.prototype.setFromVectors = function(childDirection, parentDirection, parentUp) {
    var angle, axis;
    angle = Math.acos(childDirection.dot(parentDirection));
    axis = (new THREE.Vector3(1, 0, 0)).add((new THREE.Vector3).crossVectors(parentUp, parentDirection).normalize()).sub((new THREE.Vector3).crossVectors(childDirection, parentDirection).normalize()).normalize();
    this.setFromAxisAngle(axis, angle);
    return this;
  };

  THREE.Vector3.prototype.visualize = function(scene, color) {
    if (this._arrow) {
      this._arrow.setDirection(this);
    } else {
      this._arrow = new THREE.ArrowHelper(this, new THREE.Vector3(-7, 0, 0), 10, color);
      scene.add(this._arrow);
    }
    return this;
  };

  THREE.Vector3.prototype.visualizeFrom = function(origin) {
    this._arrow.position.copy(origin);
    return this;
  };

  HEIGHT = window.innerHeight;

  WIDTH = window.innerWidth;

  scene = new THREE.Scene();

  renderer = new THREE.WebGLRenderer({
    alpha: true
  });

  renderer.setClearColor(0x000000, 1);

  renderer.setSize(WIDTH, HEIGHT);

  document.getElementById('threejs').appendChild(renderer.domElement);

  scene.add(new THREE.AxisHelper(50));

  scene.add(new THREE.AmbientLight(0x888888));

  pointLight = new THREE.PointLight(0xFFffff);

  pointLight.position = new THREE.Vector3(-20, 10, 0);

  pointLight.lookAt(new THREE.Vector3(0, 0, 0));

  scene.add(pointLight);

  redDot = new THREE.Mesh(new THREE.SphereGeometry(1), new THREE.MeshPhongMaterial({
    color: 0xff0000
  }));

  scene.add(redDot);

  yellowDot = new THREE.Mesh(new THREE.SphereGeometry(1), new THREE.MeshPhongMaterial({
    color: 0xcccc00
  }));

  scene.add(yellowDot);

  camera = new THREE.PerspectiveCamera(90, WIDTH / HEIGHT, 1, 1000);

  camera.position.set(-8, 6, -16);

  camera.lookAt(new THREE.Vector3(0, 0, 0));

  scene.add(camera);

  animation = void 0;

  handMesh = void 0;

  (new THREE.JSONLoader).load('javascripts/right-hand.json', function(geometryWithBones, materials) {
    var armVector, avg, fingerLengths, firstBoneDirection, firstBoneNormal, j, lengthVals, material, num, palmDirection, palmNormal, palmNormalUp, secondBoneDirection, secondBoneNormal, thirdBoneDirection, thirdBoneNormal, _i, _len;
    material = materials[0];
    material.skinning = true;
    THREE.GeometryUtils.center(geometryWithBones);
    handMesh = new THREE.SkinnedMesh(geometryWithBones, material);
    handMesh.castShadow = true;
    handMesh.receiveShadow = true;
    scene.add(handMesh);
    window.forearm = handMesh.children[0];
    window.palm = handMesh.children[0].children[0].children[0];
    window.rigFingers = palm.children;
    window.thumb = rigFingers[0];
    window.indexFinger = rigFingers[1];
    window.middleFinder = rigFingers[2];
    window.pinky = rigFingers[3];
    window.ringFinger = rigFingers[4];
    forearm.matrixAutoUpdate = false;
    palmNormalUp = new THREE.Vector3;
    palmNormal = (new THREE.Vector3).visualize(scene, 0x008899);
    palmDirection = new THREE.Vector3;
    armVector = (new THREE.Vector3(1, 0, 2)).normalize().visualize(scene, 0x3333ff);
    armVector.multiplyScalar(10);
    palmDirection = (new THREE.Vector3).visualize(scene);
    firstBoneDirection = (new THREE.Vector3).visualize(scene, 0xff0000);
    secondBoneDirection = (new THREE.Vector3).visualize(scene, 0xff9944);
    thirdBoneDirection = (new THREE.Vector3).visualize(scene);
    firstBoneNormal = (new THREE.Vector3).visualize(scene, 0x00aa44);
    secondBoneNormal = (new THREE.Vector3).visualize(scene, 0x009966);
    thirdBoneNormal = (new THREE.Vector3).visualize(scene, 0x009988);
    firstBoneNormal.set(0, 1, 0);
    secondBoneNormal.set(0, 1, 0);
    thirdBoneNormal.set(0, 1, 0);
    indexFinger.localToWorld(firstBoneNormal).normalize().visualize();
    renderer.render(scene, camera);
    lengthVals = [];
    fingerLengths = [66.045, 63.635, 50.07, 63.65, 70.206, 67.6442, 71.8168, 72.3318, 72.6944, 72.9638, 73.1665, 73.312, 73.4207, 73.4988, 73.5561, 73.5991, 73.6301, 73.653, 73.6699, 73.6823, 73.6914, 73.698, 73.7029, 73.7065, 73.7091, 73.711, 73.7124, 73.7135, 73.7142, 73.7148, 73.7152, 73.7155, 73.7157, 73.7159, 73.716, 73.7161, 73.7162, 71.0263, 71.0264, 73.7163, 55.8858, 71.0431, 71.5765, 68.9647, 54.2636, 68.9809];
    avg = 0;
    for (_i = 0, _len = fingerLengths.length; _i < _len; _i++) {
      num = fingerLengths[_i];
      avg += num;
    }
    console.log(avg / fingerLengths.length);
    j = 0;
    return Leap.loop(function(frame) {
      var i, leapFinger, leapHand;
      if (leapHand = frame.hands[0]) {
        redDot.position.fromArray(leapHand.stabilizedPalmPosition).divideScalar(20);
        yellowDot.position.copy(redDot.position).add((new THREE.Vector3()).fromArray(leapHand.direction).multiplyScalar(-1.5));
        armVector.visualizeFrom(yellowDot.position);
        i = 1;
        leapFinger = leapHand.fingers[i];
        palmNormalUp.fromArray(leapHand.palmNormal).multiplyScalar(-1);
        palmNormal.fromArray(leapHand.palmNormal);
        palmDirection.fromArray(leapHand.direction);
        palm.matrix.lookAt(palmDirection, zeroVector, palmNormalUp);
        palm.matrix.decompose(palm.position, palm.quaternion, palm.scale);
        palm.updateMatrixWorld(true);
        firstBoneDirection.subVectors(leapFinger.pipPosition, leapFinger.mcpPosition).normalize();
        secondBoneDirection.subVectors(leapFinger.dipPosition, leapFinger.pipPosition).normalize();
        thirdBoneDirection.subVectors(leapFinger.tipPosition, leapFinger.dipPosition).normalize();
        firstBoneNormal.set(1, 0, 0);
        secondBoneNormal.set(0, 1, 0);
        thirdBoneNormal.set(0, 1, 0);
        rigFingers[i].quaternion.setFromVectors(firstBoneDirection, palmDirection, palmNormal);
        rigFingers[i].children[0].quaternion.setFromVectors(secondBoneDirection, firstBoneDirection, palmNormal);
        rigFingers[i].children[0].children[0].quaternion.setFromVectors(thirdBoneDirection, secondBoneDirection, palmNormal);
        if (j === 0) {
          if (Math.abs(rigFingers[i].quaternion._euler._z) > 10 * TO_RAD) {
            console.log(rigFingers[i].quaternion._euler._z);
          }
        }
        j++;
        j = j % 60;
        return renderer.render(scene, camera);
      }
    });
  });

}).call(this);
