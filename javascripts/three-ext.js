// Generated by CoffeeScript 1.6.3
(function() {
  window.TO_RAD = Math.PI / 180;

  window.TO_DEG = 1 / TO_RAD;

  window.zeroVector = new THREE.Vector3(0, 0, 0);

  THREE.ArrowHelper.prototype.label = function(text, scale, flip) {
    if (scale == null) {
      scale = 1;
    }
    if (flip == null) {
      flip = false;
    }
    text = new THREE.Mesh(new THREE.TextGeometry(text, {
      size: this.line.scale.y / 20 * scale,
      height: this.line.scale.y / 100 * scale
    }), new THREE.MeshBasicMaterial({
      color: this.line.material.color
    }));
    if (flip) {
      text.rotation = new THREE.Euler(180 * TO_RAD, 180 * TO_RAD, 90 * TO_RAD);
      text.position = vec3(0, 4, 0);
    } else {
      text.rotation = new THREE.Euler(0, 0, 90 * TO_RAD);
      text.position = vec3(-0.1, 0, 0);
    }
    return this.add(text);
  };

  THREE.Vector3.prototype.quick = function() {
    return [this.x.toPrecision(2), this.y.toPrecision(2), this.z.toPrecision(2)];
  };

  window.vec3 = function(x, y, z) {
    return new THREE.Vector3(x, y, z);
  };

  THREE.Vector3.prototype.visualize = function(parent, color, options) {
    if (options == null) {
      options = {};
    }
    options.length || (options.length = 10);
    if (this._arrow) {
      this._arrow.setDirection(this);
    } else {
      this._arrow = new THREE.ArrowHelper(this, options.from || new THREE.Vector3(0, 0, 0), options.length, color);
      if (options.label) {
        this._arrow.label(options.label, 1, options.flip);
      }
      parent.add(this._arrow);
    }
    return this;
  };

  THREE.Vector3.prototype.visualizeFrom = function(position) {
    this._arrow.position = position;
    return this;
  };

  THREE.Vector3.prototype.visualizeFromPosition = function() {
    this._arrow.position = this.position;
    return this;
  };

}).call(this);
