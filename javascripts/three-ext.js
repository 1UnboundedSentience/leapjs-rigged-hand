// Generated by CoffeeScript 1.6.3
(function() {
  window.TO_RAD = Math.PI / 180;

  window.TO_DEG = 1 / TO_RAD;

  window.zeroVector = new THREE.Vector3(0, 0, 0);

  THREE.Quaternion.prototype.setFromPoints = function(a, b, c) {
    return this.setFromVectors((new THREE.Vector3).subVectors(a, b).normalize(), (new THREE.Vector3).subVectors(c, b).normalize());
  };

  THREE.Vector3.prototype.quick = function() {
    return [this.x.toPrecision(2), this.y.toPrecision(2), this.z.toPrecision(2)];
  };

  window.vec3 = function(x, y, z) {
    return new THREE.Vector3(x, y, z);
  };

  THREE.Bone.prototype.positionFromWorld = function() {
    var angle, deltaPos, directionDotParentDirection, localAxis, worldAxisLevel;
    directionDotParentDirection = this.worldDirection.dot(this.parent.worldDirection);
    angle = Math.acos(directionDotParentDirection);
    this.localAxisLevel || (this.localAxisLevel = new THREE.Vector3(1, 0, 0));
    worldAxisLevel = (new THREE.Vector3).crossVectors(this.parent.worldDirection, this.parent.worldUp).normalize();
    this.worldAxis.crossVectors(this.parent.worldDirection, this.worldDirection).normalize();
    this.worldAxisReverse.crossVectors(this.worldDirection, this.parent.worldDirection).normalize();
    this.worldUp || (this.worldUp = new THREE.Vector3);
    this.worldUp.set(0, 0, 0).add(this.parent.worldUp.clone().multiplyScalar(directionDotParentDirection)).add((new THREE.Vector3).crossVectors(this.worldAxis, this.parent.worldUp).multiplyScalar(Math.sin(angle))).add(this.worldAxis.clone().multiplyScalar(this.worldAxis.dot(this.parent.worldUp) * (1 - directionDotParentDirection))).normalize();
    localAxis = this.localAxisLevel.clone().add(worldAxisLevel).sub(this.worldAxisReverse).normalize();
    if (!this._worldDirectionArrow) {
      this._worldDirectionArrow = new THREE.ArrowHelper(this.worldDirection, zeroVector, 4, 0x99cc33);
      this.add(this._worldDirectionArrow);
    }
    if (!this._parentWorldDirectionArrow) {
      this._parentWorldDirectionArrow = new THREE.ArrowHelper(this.parent.worldDirection, zeroVector, 4, 0xff9933);
      console.log(this.parent.worldDirection.quick(), this.position.quick());
      this.add(this._parentWorldDirectionArrow);
    }
    deltaPos = void 0;
    if (!this._directionArrow) {
      if (this.children[0]) {
        deltaPos = vec3().subVectors(this.children[0].position, this.position);
        this._directionArrow = new THREE.ArrowHelper(deltaPos, zeroVector, deltaPos.length() * 100, 0x33ccff);
      }
      console.log("" + this.name + " position", this.position.quick(), "" + this.children[0].name + " child position", this.children[0].position.quick(), "length", deltaPos.length().toPrecision(2));
      this.add(this._directionArrow);
    }
    this.quaternion.setFromAxisAngle(localAxis, angle);
    return this;
  };

  THREE.Vector3.prototype.visualize = function(parent, color, length) {
    length || (length = 10);
    if (this._arrow) {
      this._arrow.setDirection(this);
    } else {
      this._arrow = new THREE.ArrowHelper(this, new THREE.Vector3(0, 0, 0), length, color);
      parent.add(this._arrow);
    }
    return this;
  };

  THREE.Vector3.prototype.visualizeFrom = function(position) {
    this._arrow.position = position;
    return this;
  };

  THREE.Vector3.prototype.visualizeFromPosition = function() {
    this._arrow.position = this.position;
    return this;
  };

  THREE.Scene.prototype.scene = THREE.SkinnedMesh.prototype.scene = THREE.Bone.prototype.scene = THREE.Object3D.scene = function() {
    if (this.parent === void 0) {
      return this;
    } else {
      return this.parent.scene();
    }
  };

  THREE.Bone.prototype.visualizeRecursive = THREE.Object3D.prototype.visualizeRecursive = function() {
    var child, l, _i, _len, _ref, _results;
    this._visualizeX || (this._visualizeX = new THREE.Vector3);
    this._visualizeY || (this._visualizeY = new THREE.Vector3);
    this._visualizeZ || (this._visualizeZ = new THREE.Vector3);
    l = 3;
    if (this.children[0]) {
      l = vec3().subVectors(this.children[0].position, this.position);
    }
    this._visualizeX.set(1, 0, 0).visualize(this, 'red', l.x);
    this._visualizeY.set(0, 1, 0).visualize(this, 0x00ff00, l.y);
    this._visualizeZ.set(0, 0, 1).visualize(this, 0x0000ff, l.z);
    _ref = this.children;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      child = _ref[_i];
      if (!(child instanceof THREE.ArrowHelper)) {
        _results.push(child.visualizeRecursive());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

}).call(this);
